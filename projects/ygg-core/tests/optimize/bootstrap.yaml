Rule {
    name: "program",
    type: "Program",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        node_tag: "statement",
        base: Unary {
            base: Data {
                data: SymbolPath(statement),
            },
            operations: [
                RepeatsNonnull+,
            ],
        },
    },
    range: 300..675,
}
Rule {
    name: "statement",
    type: "Statement",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat [
            ExpressionNode {
                base: Concat [
                    ExpressionNode {
                        base: Concat [
                            Data {
                                branch_tag: "Grammar",
                                branch_mode: "",
                                data: SymbolPath(grammar_statement),
                            },
                        ],
                    },
                ],
            },
        ],
    },
    range: 675..905,
}
Rule {
    name: "grammar_statement",
    type: "GrammarStatement",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat [
            Data {
                data: SymbolPath(grammar),
            },
            '~',
            Data {
                data: SymbolPath(id),
            },
            '~',
            ExpressionNode {
                base: Unary {
                    base: Data {
                        data: SymbolPath(_grammar_exts),
                    },
                    operations: [
                        Optional?,
                    ],
                },
            },
            '~',
            ExpressionNode {
                base: Unary {
                    base: Data {
                        data: SymbolPath(eos),
                    },
                    operations: [
                        Optional?,
                    ],
                },
            },
        ],
    },
    range: 905..963,
}
Rule {
    name: "fragment_statement",
    type: "FragmentStatement",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat [
            Data {
                data: SymbolPath(fragment),
            },
            '~',
            Data {
                data: SymbolPath(id),
            },
            '~',
            ExpressionNode {
                base: Unary {
                    base: Data {
                        data: SymbolPath(eos),
                    },
                    operations: [
                        Optional?,
                    ],
                },
            },
        ],
    },
    range: 1237..1281,
}
Rule {
    name: "import_statement",
    type: "ImportStatement",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: true,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat [
            Data {
                data: SymbolPath(import),
            },
            '~',
            Data {
                node_tag: "path",
                data: SymbolPath(string),
            },
            '~',
            ExpressionNode {
                branch_tag: "FromPath",
                branch_mode: "",
                base: Unary {
                    base: ExpressionNode {
                        base: Concat [
                            Data {
                                data: SymbolPath(as),
                            },
                            '~',
                            Data {
                                node_tag: "id",
                                data: SymbolPath(id),
                            },
                        ],
                    },
                    operations: [
                        Optional?,
                    ],
                },
            },
        ],
    },
    range: 1281..1430,
}
Rule {
    name: "import_item",
    type: "ImportItem",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat [
            Data {
                node_tag: "id",
                data: SymbolPath(id),
            },
            '~',
            Data {
                data: SymbolPath(as),
            },
            '~',
            Data {
                node_tag: "alias",
                data: SymbolPath(id),
            },
        ],
    },
    range: 1509..1618,
}
Rule {
    name: "expression",
    type: "Expression",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat [
            ExpressionNode {
                base: Concat [
                    ExpressionNode {
                        base: Concat [
                            ExpressionNode {
                                base: Concat [
                                    Data {
                                        branch_tag: "Priority",
                                        branch_mode: "",
                                        data: SymbolPath(priority),
                                    },
                                ],
                            },
                        ],
                    },
                ],
            },
        ],
    },
    range: 1722..1923,
}
Rule {
    name: "data",
    type: "Data",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: Data {
        data: SymbolPath(_atom),
    },
    range: 2620..2633,
}
Rule {
    name: "atom",
    type: "Atom",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat [
            ExpressionNode {
                base: Concat [
                    ExpressionNode {
                        base: Concat [
                            Data {
                                data: SymbolPath(id),
                            },
                        ],
                    },
                ],
            },
        ],
    },
    range: 2633..2785,
}
Rule {
    name: "identifier",
    type: "Identifier",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        inline_token: true,
        base: Concat [
            Data {
                data: "_",
            },
            '~',
            Data {
                data: SymbolPath(XID_CONTINUE),
            },
        ],
    },
    range: 2937..3035,
}
Rule {
    name: "integer",
    type: "Integer",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        inline_token: true,
        base: Concat [
            ExpressionNode {
                base: Unary {
                    base: Data {
                        data: SymbolPath(_sign),
                    },
                    operations: [
                        Optional?,
                    ],
                },
            },
            ' ',
            Data {
                data: SymbolPath(_unsigned),
            },
        ],
    },
    range: 3035..3066,
}
Rule {
    name: "string",
    type: "String",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        inline_token: true,
        base: Concat [
            Data {
                data: "'[^'\\]*(\\.[^'\\]*)*'",
            },
        ],
    },
    range: 3126..3207,
}
Rule {
    name: "regex_long",
    type: "RegexLong",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: true,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat [
            Data {
                data: "/",
            },
            '~',
            Data {
                node_tag: "item",
                data: SymbolPath(regex_item),
            },
            '~',
            Data {
                data: "/",
            },
            '~',
            ExpressionNode {
                base: Unary {
                    base: Data {
                        data: SymbolPath(regex_mode),
                    },
                    operations: [
                        Optional?,
                    ],
                },
            },
        ],
    },
    range: 3207..3286,
}
Rule {
    name: "regex_item",
    type: "RegexItem",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: Data {
        data: SymbolPath(i),
    },
    range: 3306..3328,
}
Rule {
    name: "regex_range",
    type: "RegexRange",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        node_tag: "mode",
        base: Concat [
            Data {
                data: "[",
            },
            '~',
            ExpressionNode {
                base: Unary {
                    base: Data {
                        data: SymbolPath(regex_range_item),
                    },
                    operations: [
                        RepeatsNonnull+,
                    ],
                },
            },
            '~',
            Data {
                data: "]",
            },
        ],
    },
    range: 3328..3390,
}
Rule {
    name: "regex_range_item",
    type: "RegexRangeItem",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat [
            Data {
                data: SymbolPath(regex_set),
            },
        ],
    },
    range: 3390..3468,
}
Rule {
    name: "regex_set",
    type: "RegexSet",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat [
            Data {
                data: "\\p",
            },
            '~',
            Data {
                data: "{",
            },
            '~',
            Data {
                node_tag: "set",
                data: "[_0-9a-zA-Z]+",
            },
            '~',
            Data {
                data: "}",
            },
        ],
    },
    range: 3557..3614,
}
Rule {
    name: "regex_repeats",
    type: "RegexRepeats",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: true,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat [
            Data {
                data: "{",
            },
            '~',
            Data {
                node_tag: "repeats",
                data: SymbolPath(integer),
            },
            '~',
            Data {
                data: "}",
            },
        ],
    },
    range: 3614..3750,
}
Rule {
    name: "eos",
    type: "Eos",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: Data {
        data: ";",
    },
    range: 3750..3764,
}
Rule {
    name: "bool",
    type: "Bool",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        inline_token: true,
        base: Concat [
            Data {
                data: "true",
            },
        ],
    },
    range: 3814..3906,
}
Rule {
    name: "COMMENT",
    type: "Comment",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: Data {
        data: SymbolPath(comment_inline),
    },
    range: 3906..3961,
}
Rule {
    name: "comment_inline",
    type: "CommentInline",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: Data {
        data: "//!",
    },
    range: 3988..4011,
}
Rule {
    name: "comment_block",
    type: "CommentBlock",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat [
            Data {
                data: "//+",
            },
            '~',
            Data {
                data: "//-",
            },
        ],
    },
    range: 4011..4041,
}
Rule {
    name: "fragment",
    type: "Fragment",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: Data {
        data: "fragment!",
    },
    range: 4285..4308,
}
Rule {
    name: "grammar",
    type: "Grammar",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: Data {
        data: "grammar!",
    },
    range: 4308..4330,
}
Rule {
    name: "ignore",
    type: "Ignore",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: Data {
        data: "ignore!",
    },
    range: 4330..4351,
}
Rule {
    name: "import",
    type: "Import",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: Data {
        data: "import!",
    },
    range: 4351..4372,
}
Rule {
    name: "macro",
    type: "Macro",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: Data {
        data: "macro!",
    },
    range: 4372..4392,
}
Rule {
    name: "as",
    type: "As",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: Data {
        data: "as",
    },
    range: 4392..4432,
}
