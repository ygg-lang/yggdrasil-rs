Rule {
    name: "test1",
    type: "Test1",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Unary {
            base: Data {
                data: SymbolPath(e1),
            },
            operations: [
                Optional?,
            ],
        },
    },
    range: 16..27,
}
Rule {
    name: "test2",
    type: "Test2",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Unary {
            base: Data {
                data: SymbolPath(e1),
            },
            operations: [
                Repeats*,
            ],
        },
    },
    range: 29..40,
}
Rule {
    name: "test3",
    type: "Test3",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Unary {
            base: Data {
                data: SymbolPath(e1),
            },
            operations: [
                RepeatsNonnull+,
            ],
        },
    },
    range: 42..53,
}
Rule {
    name: "test4",
    type: "Test4",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: Data {
        node_tag: "e1",
        data: SymbolPath(e1),
    },
    range: 55..66,
}
Rule {
    name: "test5",
    type: "Test5",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        node_tag: "e1",
        base: Unary {
            base: Data {
                data: SymbolPath(e1),
            },
            operations: [
                Repeats*,
            ],
        },
    },
    range: 68..80,
}
Rule {
    name: "test6",
    type: "Test6",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Unary {
            base: Data {
                data: SymbolPath(e1),
            },
            operations: [
                Repeats*,
                Optional?,
            ],
        },
    },
    range: 83..95,
}
Rule {
    name: "test7",
    type: "Test7",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Unary {
            base: Data {
                data: SymbolPath(e1),
            },
            operations: [
                Repeats*,
                RepeatsNonnull+,
            ],
        },
    },
    range: 97..109,
}
Rule {
    name: "test8",
    type: "Test8",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Unary {
            base: Data {
                data: SymbolPath(e1),
            },
            operations: [
                Optional?,
                Repeats*,
            ],
        },
    },
    range: 111..123,
}
Rule {
    name: "test9",
    type: "Test9",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        node_tag: "e1",
        base: Unary {
            base: Data {
                data: SymbolPath(e1),
            },
            operations: [
                Optional?,
                Repeats*,
            ],
        },
    },
    range: 125..140,
}
Rule {
    name: "test10",
    type: "Test10",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Unary {
            base: ExpressionNode {
                base: Concat [
                    ExpressionNode {
                        node_tag: "e1",
                        base: Unary {
                            base: Data {
                                data: SymbolPath(e1),
                            },
                            operations: [
                                Optional?,
                            ],
                        },
                    },
                    '~',
                    ExpressionNode {
                        node_tag: "e2",
                        base: Unary {
                            base: Data {
                                data: SymbolPath(e2),
                            },
                            operations: [
                                RepeatsNonnull+,
                            ],
                        },
                    },
                ],
            },
            operations: [
                Repeats*,
            ],
        },
    },
    range: 143..167,
}
Rule {
    name: "test11",
    type: "Test11",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Unary {
            base: ExpressionNode {
                base: Concat [
                    ExpressionNode {
                        node_tag: "e1",
                        base: Unary {
                            base: Data {
                                data: SymbolPath(e1),
                            },
                            operations: [
                                Optional?,
                            ],
                        },
                    },
                    '~',
                    ExpressionNode {
                        node_tag: "e2",
                        base: Unary {
                            base: Data {
                                data: SymbolPath(e2),
                            },
                            operations: [
                                Repeats*,
                            ],
                        },
                    },
                ],
            },
            operations: [
                RepeatsNonnull+,
            ],
        },
    },
    range: 167..191,
}
